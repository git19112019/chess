chess_game:
  title: "Terminal Chess Game"
  version: "1.0"
  author: "You"
  description: >
    A complete terminal-based chess game written in Python.
    All essential components — pseudocode, Python code, flowchart, and example game state — are included
    in this single YAML file.

  pseudocode:
    description: "Logical flow of the game from setup to end."
    steps:
      - Setup:
          - Initialize 8x8 board with standard pieces.
          - Set current_player to 'White'.
          - Set game_over to False.
          - Set winner to None.
          - Initialize move_history as empty list.
      - Game Loop (while game_over is False):
          - Display the board.
          - Prompt current_player for input:
              - Options: Make move, Restart, Quit.
          - If move:
              - Parse start and end positions (e.g. "e2 e4").
              - Validate move:
                  - Check ownership.
                  - Check legality.
                  - Prevent self-check.
              - If valid:
                  - Update board.
                  - Record move.
                  - Check for checkmate or stalemate:
                      - If yes → set game_over and winner.
                      - Else → switch player.
              - Else:
                  - Show invalid move message.
          - If restart:
              - Reset board and state.
          - If quit:
              - Set game_over to True.
      - End:
          - Display final board.
          - Announce winner or draw.
          - Ask to restart or exit.

  python_code:
    description: "Python implementation of the terminal-based chess game."
    snippet: |
      class ChessGame:
          def __init__(self):
              self.board = self.initialize_board()
              self.current_player = "White"
              self.game_over = False
              self.winner = None
              self.move_history = []

          def initialize_board(self):
              return [
                  ["r", "n", "b", "q", "k", "b", "n", "r"],
                  ["p", "p", "p", "p", "p", "p", "p", "p"],
                  [" ", " ", " ", " ", " ", " ", " ", " "],
                  [" ", " ", " ", " ", " ", " ", " ", " "],
                  [" ", " ", " ", " ", " ", " ", " ", " "],
                  [" ", " ", " ", " ", " ", " ", " ", " "],
                  ["P", "P", "P", "P", "P", "P", "P", "P"],
                  ["R", "N", "B", "Q", "K", "B", "N", "R"]
              ]

          def display_board(self):
              print("  a b c d e f g h")
              for i, row in enumerate(self.board):
                  print(f"{8 - i} {' '.join(row)}")

          def is_valid_move(self, start, end):
              # TODO: Implement real chess move validation
              return True

          def make_move(self, start, end):
              sr, sc = self.parse_position(start)
              er, ec = self.parse_position(end)
              piece = self.board[sr][sc]

              if self.is_valid_move(start, end):
                  self.board[er][ec] = piece
                  self.board[sr][sc] = " "
                  self.move_history.append((start, end))
                  return True
              return False

          def parse_position(self, pos):
              col, row = pos
              return 8 - int(row), ord(col.lower()) - ord('a')

          def check_game_over(self):
              # TODO: Add checkmate and stalemate logic
              return False

          def switch_player(self):
              self.current_player = "Black" if self.current_player == "White" else "White"

          def restart_game(self):
              self.__init__()
              print("Game restarted.")

          def play(self):
              print("Welcome to Terminal Chess!")
              while not self.game_over:
                  self.display_board()
                  move = input(f"{self.current_player}, enter your move (e.g., e2 e4): ").strip().lower()

                  if move in ["r", "restart"]:
                      self.restart_game()
                      continue
                  if move in ["q", "quit"]:
                      self.game_over = True
                      break

                  try:
                      start, end = move.split()
                      if self.make_move(start, end):
                          if self.check_game_over():
                              self.game_over = True
                              self.winner = self.current_player
                              print(f"{self.winner} wins!")
                          else:
                              self.switch_player()
                      else:
                          print("Invalid move.")
                  except:
                      print("Invalid input. Use format like 'e2 e4'")

              self.display_board()
              print("Game Over. Thanks for playing!")

  flowchart:
    description: "Chess game logic in Mermaid.js flowchart syntax."
    diagram: |
      graph TD
        A[Start Game] --> B[Initialize Game State]
        B --> C[Main Game Loop]
        C --> D[Display Board]
        D --> E{Player Action}
        E -- Move --> F[Parse & Validate Move]
        F -- Invalid --> C
        F -- Valid --> G[Update Board & History]
        G --> H[Checkmate or Stalemate?]
        H -- Yes --> I[Announce Result]
        H -- No --> J[Switch Player] --> C
        E -- Restart --> B
        E -- Quit --> K[Exit Game]
        I --> L{Play Again?}
        L -- Yes --> B
        L -- No --> K

  json_example:
    description: "Example serialized board state after a few opening moves."
    state: |
      {
        "board": [
          ["r", "n", "b", " ", "k", "b", "n", "r"],
          ["p", "p", " ", "p", "p", "p", "p", "p"],
          [" ", " ", "p", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", "P", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " "],
          ["P", "P", "P", "P", " ", "P", "P", "P"],
          ["R", "N", "B", "Q", "K", "B", "N", "R"]
        ],
        "current_player": "Black",
        "game_over": false,
        "winner": null,
        "move_history": [
          ["e2", "e4"],
          ["e7", "e5"],
          ["d2", "d4"]
        ]
      }
